<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRAMP 的博客</title>
  <subtitle>记录，仅仅为了记录那些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangzhaoyu.github.io/"/>
  <updated>2016-10-08T06:45:50.898Z</updated>
  <id>https://zhangzhaoyu.github.io/</id>
  
  <author>
    <name>张兆玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式寻根究底 - 单例模式（Singleton）</title>
    <link href="https://zhangzhaoyu.github.io/2016/10/08/introduction-of-singleton-design-pattern/"/>
    <id>https://zhangzhaoyu.github.io/2016/10/08/introduction-of-singleton-design-pattern/</id>
    <published>2016-10-08T04:22:45.000Z</published>
    <updated>2016-10-08T06:45:50.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>单例模式是一个既简单又复杂的模式。简单在它想实现的目标十分容易理解，而又复杂在要写出线程安全的单例模式不是那么容易。单例模式的核心定义是：确保某个类只有一个实例，并提供一个访问该实例的全局访问点(Ensure a class has only instance, and provide a global point of access to it)。</p>
<a id="more"></a>
<h1 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h1><p>单例模式的实现分为急切的（Eager）和延迟的(LAZY)，线程安全(Thread-Safe)和非线程安全(Non-Thread-Safe)几种。下面就Java 对单例模式的实现进行介绍。</p>
<h2 id="Eager-模式实现"><a href="#Eager-模式实现" class="headerlink" title="Eager 模式实现"></a>Eager 模式实现</h2><p>Eager 模式的实现通常在静态的单例字段声明时（或单例类的构造函数）就创建该单例的对象。这样在单例类被Java 虚拟机加载时，就能够实例化该单例。</p>
<h3 id="基于静态域的Eager-模式"><a href="#基于静态域的Eager-模式" class="headerlink" title="基于静态域的Eager 模式"></a>基于静态域的Eager 模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StaticSingleton INSTANCE = <span class="keyword">new</span> StaticSingleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticSingleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解决反序列化出现多个实例的问题</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将初始化放到静态块中实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="基Java-Enum-实现的Eager-模式"><a href="#基Java-Enum-实现的Eager-模式" class="headerlink" title="基Java Enum 实现的Eager 模式"></a>基<strong>Java Enum</strong> 实现的Eager 模式</h3><p>Java 枚举模式实现的单例是被推崇的，因为其具有：</p>
<ul>
<li>绝对的线程安全的，由Java 虚拟机保证</li>
<li>不会因为反序列化产生对个实例，Enum 在底层实现了<em>readResolve()</em> 方法</li>
<li>由于enum 类型在Java 底层是由<strong>abstract</strong> 修饰的类，因此没法被实例化，能够防止反射攻击。因为反射机制可以调用私有的构造器构造对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  EnumSingleton &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello : "</span> + name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        singleton = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        EnumSingleton.INSTANCE.print(<span class="string">"hello"</span>);</div><div class="line">        Object object = EnumSingleton.INSTANCE.build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Lazy-模式实现"><a href="#Lazy-模式实现" class="headerlink" title="Lazy 模式实现"></a>Lazy 模式实现</h2><p>Eager 模式的实现可以避免线程的问题，但是当单例对象需要加载的系统资源很多时，会导致系统在启动时很慢。因此，需要一种方式在使用该对象时构造。也就是单例实现的Lazy 模式。</p>
<h3 id="非线程安全的Lazy-模式"><a href="#非线程安全的Lazy-模式" class="headerlink" title="非线程安全的Lazy 模式"></a>非线程安全的Lazy 模式</h3><p>采用延迟实例化的方式，能够将单例对象的构造延迟到第一次调用时。很显然，该方式是非线程安全（Non-Thread-Safe）的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;  </div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;  </div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="comment">// can be interrupted to other thread</span></div><div class="line">                singleton = <span class="keyword">new</span> Singleton();  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> singleton;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="线程安全的Lazy-模式"><a href="#线程安全的Lazy-模式" class="headerlink" title="线程安全的Lazy 模式"></a>线程安全的Lazy 模式</h3><p>在方法上加锁，能够保证该单例模式在多线程环境下的安全性，但是性能将严重受到影响。因为单例对象一旦创建就不需要同步读取获得对象上的互斥锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">        instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="基于静态内部类的方式"><a href="#基于静态内部类的方式" class="headerlink" title="基于静态内部类的方式"></a>基于静态内部类的方式</h3><p>内部静态类SingletonHolder 不会在Singleton 类被装载时就被实例化，需要在<em>getInstance()</em> 显示地被调用时才会被加载。因此，也可以实现Lazy 加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="基于DCL-的Lazy-模式"><a href="#基于DCL-的Lazy-模式" class="headerlink" title="基于DCL 的Lazy 模式"></a>基于DCL 的Lazy 模式</h3><p>DCL（Double Checked Locking）配合volatile 的使用进行双重检查，能够满足线程安全和延迟加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Lazy load thread safe</span></div><div class="line"> * Created by zhaoyu on 16-8-31.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckedLockingSingleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> DoubleCheckedLockingSingleton INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckedLockingSingleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> DoubleCheckedLockingSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (DoubleCheckedLockingSingleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">                    INSTANCE = <span class="keyword">new</span> DoubleCheckedLockingSingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h1><ul>
<li>项目中共享的访问点或共享的数据，如系统的配置信息</li>
<li>创建一个系统消耗过多资源的对象，例如访问IO和数据库等资源</li>
<li>Web 中采用单例模式保持计数器的值，并确保是线程安全的</li>
<li>生成唯一的序列ID 的场景</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式（Singleton Pattern）作为被广泛使用的一个模式，不仅能够减少系统的内存开销和提高系统的性能，还能够避免对系统资源的过多占用。在使用单例模式时一定要考虑是否在多线程环境下使用。目前，基于Enum 的实现是现在推荐的单例实现方式。总之，单例模式的使用需要在实际环境中根据需求选择合适的实现方式。</p>
<h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><ol>
<li><a href="https://zh.wikipedia.org/zh-cn/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">单例模式</a></li>
<li><a href="http://tramp-zzy.iteye.com/blog/1976102" target="_blank" rel="external">设计模式-单例模式-TRAMP_ZZY</a></li>
</ol>
<hr>
<p>本文章采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>欢迎转载，但转载请注明来自<a href="https://zhangzhaoyu.github.io/">张兆玉</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文链接：<a href="https://zhangzhaoyu.github.io/2016/10/08/introduction-of-singleton-design-pattern/">https://zhangzhaoyu.github.io/2016/10/08/introduction-of-singleton-design-pattern/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;单例模式是一个既简单又复杂的模式。简单在它想实现的目标十分容易理解，而又复杂在要写出线程安全的单例模式不是那么容易。单例模式的核心定义是：确保某个类只有一个实例，并提供一个访问该实例的全局访问点(Ensure a class has only instance, and provide a global point of access to it)。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zhangzhaoyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Singleton" scheme="https://zhangzhaoyu.github.io/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>Spring 寻根究底 - Spring 4.x Task 和 Schedule 概述</title>
    <link href="https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/"/>
    <id>https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/</id>
    <published>2016-09-30T13:53:00.000Z</published>
    <updated>2016-10-08T06:47:16.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在很多业务场景中，系统都需要用到任务调度系统。例如定期地清理Redis 缓存，周期性地检索某一条件并更新系统的资源等。在现代的应用系统中，快速地响应用户的请求，是用户体验最主要的因素之一。因此在Web 系统中异步地执行任务，也会在很多场景中经常涉及到。本文对任务调度和异步执行的Java 实现进行了总结，主要讲述一下内容：</p>
<ul>
<li>Java 对异步执行和任务调度的支持</li>
<li>Spring 4.X 的异步执行和任务调度实现</li>
</ul>
<a id="more"></a>
<h1 id="Java-对异步执行和任务调度的支持"><a href="#Java-对异步执行和任务调度的支持" class="headerlink" title="Java 对异步执行和任务调度的支持"></a>Java 对异步执行和任务调度的支持</h1><p>异步执行和任务调度底层的语言支撑都是Java 的多线程技术。线程是系统进行独立运行和调度的基本单位。拥有了多线程，系统就拥有了同时处理多项任务的能力。</p>
<h2 id="Java-实现异步调用"><a href="#Java-实现异步调用" class="headerlink" title="Java 实现异步调用"></a>Java 实现异步调用</h2><p>在Java 中要实现多线程有实现Runnable 接口和扩展Thread 类两种方式。只要将需要异步执行的任务放在run() 方法中，在主线程中启动要执行任务的子线程就可以实现任务的异步执行。如果需要实现基于时间点触发的任务调度，就需要在子线程中循环的检查系统当前的时间跟触发条件是否一致，然后触发任务的执行。该内容属于Java 多线程的基础知识，此处略过不讲。</p>
<h2 id="Java-Timer-和-TimeTask-实现任务调度"><a href="#Java-Timer-和-TimeTask-实现任务调度" class="headerlink" title="Java Timer 和 TimeTask 实现任务调度"></a>Java Timer 和 TimeTask 实现任务调度</h2><p>为了便于开发者快速地实现任务调度，Java JDK 对任务调度的功能进行了封装，实现了Timer 和TimerTask 两个工具类。</p>
<p><img src="/css/images/spring/timertask.png" alt="TimerTask 类"></p>
<p>由上图，我们可以看出TimeTask 抽象类在实现Runnable 接口的基础上增加了任务cancel() 和任务scheduledExecuttionTime() 两个方法。</p>
<p><img src="/css/images/spring/timer.png" alt="Timer 类"></p>
<p>上图为调度类Timer 的实现。从Timer类的源码，可以看到其采用TaskQueue 来实现对多个TimeTask 的管理。TimerThread 集成自Thread 类，其mainLoop() 用来对任务进行调度。而Timer 类提供了四种重载的schedule() 方法和重载了两种sheduleAtFixedRate() 方法来实现几种基本的任务调度类型。下面的代码是采用Timer 实现的定时系统时间打印程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTimeTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="keyword">new</span> Date().toString());</div><div class="line">        &#125;</div><div class="line">                    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Timer timer = <span class="keyword">new</span> Timer(<span class="string">"hello"</span>);</div><div class="line">        timer.schedule(<span class="keyword">new</span> PrintTimeTask(), <span class="number">1000L</span>, <span class="number">2000L</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring-4-x-中的异步执行和任务调度"><a href="#Spring-4-x-中的异步执行和任务调度" class="headerlink" title="Spring 4.x 中的异步执行和任务调度"></a>Spring 4.x 中的异步执行和任务调度</h1><h2 id="Spring-4-x-中的异步执行"><a href="#Spring-4-x-中的异步执行" class="headerlink" title="Spring 4.x 中的异步执行"></a>Spring 4.x 中的异步执行</h2><p>Spring 作为一站式框架，为开发者提供了异步执行和任务调度的抽象接口<strong>TaskExecutor</strong> 和<strong>TaskScheduler</strong>。Spring 对这些接口的实现类支持线程池(Thread Pool) 和代理。<br>Spring 提供了对JDK 中Timer和开源的流行任务调度框架<a href="http://quartz-shceduler.org" target="_blank" rel="external">Quartz</a>的支持。Spring 通过将关联的Schedule 转化为FactoryBean 来实现。通过Spring 调度框架，开发者可以快速地通过<strong>MethodInvokingFactoryBean</strong> 来实现将POJO 类的方法转化为任务。</p>
<h3 id="Spring-TaskExecutor"><a href="#Spring-TaskExecutor" class="headerlink" title="Spring TaskExecutor"></a>Spring TaskExecutor</h3><p><strong>TaskExecutor</strong> 接口扩展自java.util.concurrent.Executor 接口。TaskExecutor 被创建来为其他组件提供线程池调用的抽象。</p>
<p><strong>ThreadPoolTaskExecutor</strong> 是TaskExecutor 的最主要实现类之一。该类的核心继承关系如下图所示。<br><img src="/css/images/spring/ThreadPoolTaskExecutor.png" alt="ThreadPooltaskexecutor 类"></p>
<p>ThreadPoolTaskExecutor 接口扩展了重多的接口，让其具备了更多的能力。要实现异步需要标注@Async 注解：</p>
<ul>
<li>AsyncTaskExecutor 增加了返回结果为Future 的submit() 方法，该方法的参数为Callable 接口。相比Runnable 接口，多了将执行结果返回的功能。</li>
<li>AsyncListenableTaskExecutor 接口允许返回拥有回调功能的ListenableFuture 接口，这样在结果执行完毕是，能够直接回调处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenableTask</span> </span>&#123;</div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListenableFuture&lt;Integer&gt; <span class="title">compute</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            sum += i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(sum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBackImpl</span> <span class="keyword">implements</span> </span></div><div class="line">        <span class="title">ListenableFutureCallback</span>&lt;<span class="title">Integer</span>&gt; &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123;</div><div class="line">            System.out.println(ex.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Integer result)</span> </span>&#123;</div><div class="line">            System.out.println(result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ListenableTask listenableTask = <span class="keyword">new</span> ListenableTask();</div><div class="line">        ListenableFuture&lt;Integer&gt; listenableFuture = </div><div class="line">            listenableTask.compute(<span class="number">10</span>);</div><div class="line">        listenableFuture.addCallback(<span class="keyword">new</span> CallBackImpl());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ThreadFactory 定义了创建线程的工厂方法，可以扩展该方法实现对Thread 的改造。</li>
</ul>
<h3 id="基于Java-Config"><a href="#基于Java-Config" class="headerlink" title="基于Java Config"></a>基于Java Config</h3><ul>
<li><p><strong>基于注解</strong> 当采用基于Java Config 注解配置时，只需要在主配置添加@EnableAsync 注解，Spring 会自动的创建基于ThreadPoolTaskExecutor 实例注入到上下文中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAsync</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>基于AsyncConfigurer接口自定义</strong> 开发者可以自定义Executor 的类型，并且注册异常处理器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">        executor.setMaxPoolSize(<span class="number">100</span>);</div><div class="line">        executor.setCorePoolSize(<span class="number">10</span>);</div><div class="line">        <span class="keyword">return</span> executor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncUncaughtExceptionHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUncaughtException</span><span class="params">(Throwable ex, </span></span></div><div class="line">                                                Method method, Object... params) &#123;</div><div class="line">                System.out.println(ex.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基于XML-Config"><a href="#基于XML-Config" class="headerlink" title="基于XML Config"></a>基于XML Config</h3><ul>
<li><p><strong>基于传统XML的配置</strong> 基于XML 的形式，采用传统的Java Bean的形式配置ThreadPoolTaskExecutor。然后采用自动注入(autowire, resource,name)的可以直接在Spring Component 中注入Executor。以编程的形式实现异步任务。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.</span></span></div><div class="line">    ThreadPoolTaskExecutor"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"25"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>基于task 命名空间的配置</strong> Spring 为任务的执行提供了便利的task 命名空间。当采用基于XML 配置时Spring 会自动地为开发者创建Executor。同时可以在annotation-driven 标签上注册实现了AsyncUncaughtExceptionHandler 接口的异常处理器。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- config exception handler  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskAsyncExceptionHandler"</span> <span class="attr">class</span>=<span class="string">"org.zzy.spring4.application.schedulie.TaskAsyncExceptionHandler"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">exception-handler</span>=<span class="string">"taskAsyncExceptionHandler"</span> <span class="attr">scheduler</span>=<span class="string">"scheduler"</span> <span class="attr">executor</span>=<span class="string">"executor"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="异步执行的异常处理"><a href="#异步执行的异常处理" class="headerlink" title="异步执行的异常处理"></a>异步执行的异常处理</h3><p>除了上文提到的两种异常处理方式，Spring 还提供了基于SimpleApplicationEventMulticaster 类的异常处理方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SimpleApplicationEventMulticaster <span class="title">eventMulticaster</span><span class="params">(TaskExecutor taskExecutor)</span> </span>&#123;</div><div class="line">    SimpleApplicationEventMulticaster eventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">    eventMulticaster.setTaskExecutor(taskExecutor);</div><div class="line">    eventMulticaster.setErrorHandler(<span class="keyword">new</span> ErrorHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">            System.out.println(t.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> eventMulticaster;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Spring-4-x-中任务调度实现"><a href="#Spring-4-x-中任务调度实现" class="headerlink" title="Spring 4.x 中任务调度实现"></a>Spring 4.x 中任务调度实现</h2><p>Spring 的任务调度主要基于<strong>TaskScheduler</strong> 接口。<strong>ThreadPoolTaskScheduler</strong> 是Spring 任务调度的核心实现类。该类提供了大量的重载方法进行任务调度。<strong>Trigger</strong> 定义了任务被执行的触发条件。Spring 提供了基于<a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="external">Corn</a> 表达式的CornTrigger实现。TaskScheduler 如下图所示。<br><img src="/css/images/spring/taskscheduler.png" alt="ThreadPoolTaskExecutor 类"></p>
<p>实现<strong>TaskScheduler</strong> 接口的ThreadPoolTaskExecutor 继承关系。<br><img src="/css/images/spring/ThreadPoolTaskExecutor.png" alt="ThreadPoolTaskExecutor 类"></p>
<h3 id="基于Java-Config-1"><a href="#基于Java-Config-1" class="headerlink" title="基于Java Config"></a>基于Java Config</h3><ul>
<li><p><strong>基于注解的配置</strong> 当采用基于Java Config 注解配置时，只需要在主配置添加@EnableScheduling 注解，Spring 会自动的创建基于ThreadPoolTaskExecutor 实例注入到上下文中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>基于SchedulingConfigurer接口自定义</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</div><div class="line">        taskRegistrar.setTaskScheduler(<span class="keyword">new</span> ThreadPoolTaskScheduler());</div><div class="line">        taskRegistrar.getScheduler().schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"hello"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> CronTrigger(<span class="string">"0 15 9-17 * * MON-FRI"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基于XML-Config-1"><a href="#基于XML-Config-1" class="headerlink" title="基于XML Config"></a>基于XML Config</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">"myScheduler"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"myScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"10"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Scheduled-注解的使用"><a href="#Scheduled-注解的使用" class="headerlink" title="@Scheduled 注解的使用"></a>@Scheduled 注解的使用</h3><p>当某个Bean 由Spring 管理生命周期时，就可以方便的使用@Shcheduled 注解将该Bean 的方法准换为基于任务调度的策略。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scheduled</span>(initialDelay=<span class="number">1000</span>, fixedRate=<span class="number">5000</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// something that should execute periodically</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"*/5 * * * * MON-FRI"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// something that should execute on weekdays only</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="task-命名空间中的task-scheduled-tasks"><a href="#task-命名空间中的task-scheduled-tasks" class="headerlink" title="task 命名空间中的task:scheduled-tasks"></a>task 命名空间中的task:scheduled-tasks</h2><p>该元素能够实现快速地将一个普通Bean 的方法转换为Scheduled 任务的途径。具体如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span> <span class="attr">scheduler</span>=<span class="string">"myScheduler"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"beanA"</span> <span class="attr">method</span>=<span class="string">"methodA"</span> <span class="attr">fixed-delay</span>=<span class="string">"5000"</span> <span class="attr">initial-delay</span>=<span class="string">"1000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"beanB"</span> <span class="attr">method</span>=<span class="string">"methodB"</span> <span class="attr">fixed-rate</span>=<span class="string">"5000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"beanC"</span> <span class="attr">method</span>=<span class="string">"methodC"</span> <span class="attr">cron</span>=<span class="string">"*/5 * * * * MON-FRI"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"myScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"10"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文着重介绍了JDK 为任务调度提供的基础类Timer。并在此基础上详细介绍了Spring 4.x 的异步执行和任务调度的底层接口设计。并针对常用的模式进行了讲解，并附带了源代码。第三方开源的Quartz 实现了更为强大的任务调度系统，Spring 也对集成Quartz 提供了转换。之后会择机再详细的介绍Quartz 的应用和设计原理。同时，Servlet 3.x 为Web 的异步调用提供了AsyncContext，对基于Web 的异步调用提供了原生的支持，后续的文章也会对此有相应的介绍。</p>
<h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><ol>
<li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling" target="_blank" rel="external">Spring Doc Task and Schedule</a></li>
<li><a href="www.quartz-scheduler.org">Quartz</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="external">Corn Wiki</a></li>
<li><a href="https://docs.oracle.com/javaee/7/api/javax/servlet/AsyncContext.html" target="_blank" rel="external">Servlet AsyncContext</a></li>
</ol>
<hr>
<p>本文章采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>欢迎转载，但转载请注明来自<a href="https://zhangzhaoyu.github.io/">张兆玉</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文链接：<a href="https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/">https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;在很多业务场景中，系统都需要用到任务调度系统。例如定期地清理Redis 缓存，周期性地检索某一条件并更新系统的资源等。在现代的应用系统中，快速地响应用户的请求，是用户体验最主要的因素之一。因此在Web 系统中异步地执行任务，也会在很多场景中经常涉及到。本文对任务调度和异步执行的Java 实现进行了总结，主要讲述一下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 对异步执行和任务调度的支持&lt;/li&gt;
&lt;li&gt;Spring 4.X 的异步执行和任务调度实现&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring 4.x" scheme="https://zhangzhaoyu.github.io/categories/Spring-4-x/"/>
    
    
      <category term="Schedule" scheme="https://zhangzhaoyu.github.io/tags/Schedule/"/>
    
      <category term="Task" scheme="https://zhangzhaoyu.github.io/tags/Task/"/>
    
  </entry>
  
  <entry>
    <title>流浪者和罂粟花</title>
    <link href="https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/"/>
    <id>https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/</id>
    <published>2016-09-27T15:00:00.000Z</published>
    <updated>2016-09-30T12:10:04.582Z</updated>
    
    <content type="html"><![CDATA[<p>天边的最后一丝光亮终于在黑暗笼罩世界的最后一刻消散在远处的那座山的背后。</p>
<p>渐渐地，世界暗下来了。</p>
<p>月亮清冷的在一朵浓黑的密云里发着幽幽灰光，那光亮好似冻彻心扉的坚冰，若隐若现的冒着丝丝白气，那白气在空中翻腾，扭曲，变形，幻化出许许多多魑魅魍魉，他们面目狰狞地飞向这个世界，唱着狂欢的笙歌，去吞噬，去冻结，去撕扯这个世界。<br><a id="more"></a><br>有一条小路在这轮孤月下面延伸，奔跑，不知道最终要去向的是哪个地方。小路旁边的有一盏灯火在暮色中亮起来。</p>
<p>透过那微弱的灯光，在窗户里面的一个圆桌子旁边围坐一家人，有个神情坚毅里透着憔悴的男人，有个体态瘦削却流露着母爱的女人，有个鼻子里流着鼻涕的小男孩正津津有味的吃着不知道是什么的东西。在小男孩的旁边有一只小狗欢快的摇着尾巴，看着小主人津津有味的吃着的东西，眼睛里有着自己绝对忠诚的小主人。</p>
<p>在这个有着一盏灯的小房子的后面，是一望无际的有着黄色土壤的田地。黑色的风绕过高山，掠过树梢，吹向了这片土地。</p>
<p>哗哗… 阵阵植物叶子簌簌地摩擦的声音，彼此起伏，蔓延开来。风掀起的黑色的叶子，呼啸着奔向对面的那片漆黑之中。</p>
<p>月亮渐渐地完全地被纯黑色的巨大黑幕所吞噬。</p>
<p>黑暗在世界任何一个角落里开着狂欢的派对。吸食着人们内心里最后的那么一点对于理想，自由，爱的追求。</p>
<p>恐慌，恐慌，满世界的恐慌。</p>
<p>黑暗，黑暗，满世界的黑暗。</p>
<p>在那个小屋子里的角落里，一个小男孩抱着一只懒洋洋的小狗甜甜地静静地在安睡。</p>
<p>那是一个美妙的梦，屋后面的那一望无际的植物终于开花了，在小男孩的爸爸妈妈付出了极其艰辛的劳动和汗水之后终于开花了。因为小男孩知道当这些个植物的开花的时候，肯定就是爸爸妈妈展开笑颜的时候了。</p>
<p>曾经很多个夜晚，小男孩对着夜空发呆，希望寻着一颗能够实现他愿望的星星。</p>
<p>在这个梦里，小男孩终于可以在花海奔跑，呵呵的笑声伴着小狗的汪汪叫声，在这片土地里延伸。</p>
<p>一群穿着黑色制服的人顺着那条小路向着这个黑暗里唯一的存在着微弱亮光的地方走来。</p>
<p>树影斑驳，人影可怖。</p>
<p>咚咚…</p>
<p>圆桌旁边男人，内心一惊，随后握紧了拳头。重重地压在桌子。旁边的妻子轻轻地把手放在男人的肩上。</p>
<p>“不要惊醒我的孩子，我们跟你们走！”。</p>
<p>吱吱…</p>
<p>门关上了。</p>
<p>四条人影在那条小道上前行，鞋子跟地面沙子摩擦的声音不时的响起，最后，最后，消失在远处的黑暗之中。</p>
<p>身后的那所小房子里，灯光依旧是那样地微弱。</p>
<p>只是，只是一个小男孩还有一个小狗依然静静地甜甜地睡着。</p>
<p>一夜的黑暗在太阳跳过对面山头的时候消失的无影无踪。</p>
<p>小男孩高兴地奔跑着去平时爸爸妈妈早上起来会去劳作的那片田地里，去告诉他们自己昨天做了一个美丽的梦。</p>
<p>时间渐渐过去了，小男孩有些心慌了，还不见爸爸妈妈。小狗在身后也嗷嗷地叫着，表示着不安。</p>
<p>小男孩疯狂地迈着小脚步在那片田地里穿梭。一朵朵美丽的花朵在他的眼前招摇，挡住了他寻找爸爸妈妈的视线。同时也淹没了小男孩小小身体。</p>
<p>黑夜渐渐地如梦魇般来到了。</p>
<p>在昨夜的那个小屋子里，再也没有了灯光。</p>
<p>哪怕是微弱的。</p>
<p>只是在那条路上站着一个小小男孩和一只小小狗。</p>
<p>在那条路上，小男孩决定去流浪，他没有眼泪，他不知掉为什么要流眼泪，为谁而流。小男孩反过身子，指着小狗，又指了一下与自己相对的另外与一个方向，狗狗很听话的把自己的头掉到了那个方向。</p>
<p>从此，便开始了两个生命体的流浪之旅。</p>
<p>两个身影消失在了夜色之中，只剩下那个小屋和午后的那片天地和田地里一望无际正开着花的植物。</p>
<p>匆匆的，时间流逝。那一个夜晚，那几个人物和故事，也归入到历史的洪流里，渐渐地渺小渺小，渺小到貌似不曾存在过。</p>
<p>一晃十几年过去了，过去了就是过去了。</p>
<p>后来的后来，有人看到了在那片山脚下，在那个曾经的小屋的后面的那片一望无际的田地里，每当植物开花的时候总有一个人影和一只狗游荡在那儿周围。他们的身影时隐实现在那一片罂粟花的海洋里。他们捍卫着在罂粟开花期的每一朵花，他们抵御了在罂粟花最美丽季节任何一个企图采摘哪怕一朵的破坏者。</p>
<p>一人一狗一片罂粟花。</p>
<hr>
<p>本文章采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>欢迎转载，但转载请注明来自<a href="https://zhangzhaoyu.github.io/">张兆玉</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文链接：<a href="https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/">https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天边的最后一丝光亮终于在黑暗笼罩世界的最后一刻消散在远处的那座山的背后。&lt;/p&gt;
&lt;p&gt;渐渐地，世界暗下来了。&lt;/p&gt;
&lt;p&gt;月亮清冷的在一朵浓黑的密云里发着幽幽灰光，那光亮好似冻彻心扉的坚冰，若隐若现的冒着丝丝白气，那白气在空中翻腾，扭曲，变形，幻化出许许多多魑魅魍魉，他们面目狰狞地飞向这个世界，唱着狂欢的笙歌，去吞噬，去冻结，去撕扯这个世界。&lt;br&gt;
    
    </summary>
    
      <category term="diary" scheme="https://zhangzhaoyu.github.io/categories/diary/"/>
    
    
      <category term="story" scheme="https://zhangzhaoyu.github.io/tags/story/"/>
    
  </entry>
  
  <entry>
    <title>雲中的故事</title>
    <link href="https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/"/>
    <id>https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/</id>
    <published>2015-05-03T04:12:12.000Z</published>
    <updated>2016-09-30T12:10:04.570Z</updated>
    
    <content type="html"><![CDATA[<p>飄泊的那朵雲</p>
<p>心里藏着珠兒</p>
<p>一滴是姑娘的淚</p>
<p>一滴是男子的血</p>
<p>淚珠說：我是姑娘溫婉憂傷的情</p>
<p>血珠說：我是男子堅毅孤獨的心</p>
<a id="more"></a>
<p>驚雷一声</p>
<p>淚珠說：我怕</p>
<p>血珠說：你抱着我</p>
<p>她溶進他的心</p>
<p>他感覺自己的心變得好重好重</p>
<p>隨著風蕩</p>
<p>落在山中古寺的一片瓦上</p>
<p>朝日初升</p>
<p>寺中梵音唱起</p>
<p>那滴小雨</p>
<p>對着日和着梵音在瓦上</p>
<p>微笑着再見</p>
<hr>
<p>本文章采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>欢迎转载，但转载请注明来自<a href="https://zhangzhaoyu.github.io/">张兆玉</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文链接：<a href="https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/">https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;飄泊的那朵雲&lt;/p&gt;
&lt;p&gt;心里藏着珠兒&lt;/p&gt;
&lt;p&gt;一滴是姑娘的淚&lt;/p&gt;
&lt;p&gt;一滴是男子的血&lt;/p&gt;
&lt;p&gt;淚珠說：我是姑娘溫婉憂傷的情&lt;/p&gt;
&lt;p&gt;血珠說：我是男子堅毅孤獨的心&lt;/p&gt;
    
    </summary>
    
      <category term="diary" scheme="https://zhangzhaoyu.github.io/categories/diary/"/>
    
    
      <category term="story" scheme="https://zhangzhaoyu.github.io/tags/story/"/>
    
  </entry>
  
</feed>
