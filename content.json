{"meta":{"title":"TRAMP 的博客","subtitle":"记录，仅仅为了记录那些","description":"记录，仅仅为了记录那些","author":"张兆玉","url":"https://zhangzhaoyu.github.io"},"pages":[{"title":"关于我","date":"2016-09-28T00:37:32.000Z","updated":"2016-09-28T06:24:17.274Z","comments":false,"path":"about/index.html","permalink":"https://zhangzhaoyu.github.io/about/index.html","excerpt":"","text":"关于我 R&amp;D Engineer Spring Framework 未完待续…"},{"title":"分类","date":"2016-09-28T00:49:40.000Z","updated":"2016-09-28T01:22:39.850Z","comments":false,"path":"categories/index.html","permalink":"https://zhangzhaoyu.github.io/categories/index.html","excerpt":"","text":"本文链接：https://zhangzhaoyu.github.io/categories/index.html"},{"title":"标签云","date":"2016-09-28T00:59:08.000Z","updated":"2016-09-28T01:22:47.190Z","comments":false,"path":"tags/index.html","permalink":"https://zhangzhaoyu.github.io/tags/index.html","excerpt":"","text":"本文链接：https://zhangzhaoyu.github.io/tags/index.html"}],"posts":[{"title":"Spring 4.x Task 和 Schedule 概述","slug":"spring-task-and-schedule-deep-research","date":"2016-09-30T13:53:00.000Z","updated":"2016-10-01T14:24:17.706Z","comments":true,"path":"2016/09/30/spring-task-and-schedule-deep-research/","link":"","permalink":"https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/","excerpt":"摘要在很多业务场景中，系统都需要用到任务调度系统。例如定期地清理Redis 缓存，周期性地检索某一条件并更新系统的资源等。在现代的应用系统中，快速地响应用户的请求，是用户体验最主要的因素之一。因此在Web 系统中异步地执行任务，也会在很多场景中经常涉及到。本文对任务调度和异步执行的Java 实现进行了总结，主要讲述一下内容： Java 对异步执行和任务调度的支持 Spring 4.X 的异步执行和任务调度实现","text":"摘要在很多业务场景中，系统都需要用到任务调度系统。例如定期地清理Redis 缓存，周期性地检索某一条件并更新系统的资源等。在现代的应用系统中，快速地响应用户的请求，是用户体验最主要的因素之一。因此在Web 系统中异步地执行任务，也会在很多场景中经常涉及到。本文对任务调度和异步执行的Java 实现进行了总结，主要讲述一下内容： Java 对异步执行和任务调度的支持 Spring 4.X 的异步执行和任务调度实现 Java 对异步执行和任务调度的支持异步执行和任务调度底层的语言支撑都是Java 的多线程技术。线程是系统进行独立运行和调度的基本单位。拥有了多线程，系统就拥有了同时处理多项任务的能力。 Java 实现异步调用在Java 中要实现多线程有实现Runnable 接口和扩展Thread 类两种方式。只要将需要异步执行的任务放在run() 方法中，在主线程中启动要执行任务的子线程就可以实现任务的异步执行。如果需要实现基于时间点触发的任务调度，就需要在子线程中循环的检查系统当前的时间跟触发条件是否一致，然后触发任务的执行。该内容属于Java 多线程的基础知识，此处略过不讲。 Java Timer 和 TimeTask 实现任务调度为了便于开发者快速地实现任务调度，Java JDK 对任务调度的功能进行了封装，实现了Timer 和TimerTask 两个工具类。 由上图，我们可以看出TimeTask 抽象类在实现Runnable 接口的基础上增加了任务cancel() 和任务scheduledExecuttionTime() 两个方法。 上图为调度类Timer 的实现。从Timer类的源码，可以看到其采用TaskQueue 来实现对多个TimeTask 的管理。TimerThread 集成自Thread 类，其mainLoop() 用来对任务进行调度。而Timer 类提供了四种重载的schedule() 方法和重载了两种sheduleAtFixedRate() 方法来实现几种基本的任务调度类型。下面的代码是采用Timer 实现的定时系统时间打印程序。 1234567891011public class PrintTimeTask extends TimerTask &#123; @Override public void run() &#123; System.out.println(new Date().toString()); &#125; public static void main(String[] args) &#123; Timer timer = new Timer(&quot;hello&quot;); timer.schedule(new PrintTimeTask(), 1000L, 2000L); &#125;&#125; Spring 4.x 中的异步执行和任务调度Spring 4.x 中的异步执行Spring 作为一站式框架，为开发者提供了异步执行和任务调度的抽象接口TaskExecutor 和TaskScheduler。Spring 对这些接口的实现类支持线程池(Thread Pool) 和代理。Spring 提供了对JDK 中Timer和开源的流行任务调度框架Quartz的支持。Spring 通过将关联的Schedule 转化为FactoryBean 来实现。通过Spring 调度框架，开发者可以快速地通过MethodInvokingFactoryBean 来实现将POJO 类的方法转化为任务。 Spring TaskExecutorTaskExecutor 接口扩展自java.util.concurrent.Executor 接口。TaskExecutor 被创建来为其他组件提供线程池调用的抽象。 ThreadPoolTaskExecutor 是TaskExecutor 的最主要实现类之一。该类的核心继承关系如下图所示。 ThreadPoolTaskExecutor 接口扩展了重多的接口，让其具备了更多的能力。要实现异步需要标注@Async 注解： AsyncTaskExecutor 增加了返回结果为Future 的submit() 方法，该方法的参数为Callable 接口。相比Runnable 接口，多了将执行结果返回的功能。 AsyncListenableTaskExecutor 接口允许返回拥有回调功能的ListenableFuture 接口，这样在结果执行完毕是，能够直接回调处理。 123456789101112131415161718192021222324252627282930public class ListenableTask &#123; @Async public ListenableFuture&lt;Integer&gt; compute(int n) &#123; int sum = 0; for (int i = 0; i &lt; n; i++) &#123; sum += i; &#125; return new AsyncResult&lt;&gt;(sum); &#125; static class CallBackImpl implements ListenableFutureCallback&lt;Integer&gt; &#123; @Override public void onFailure(Throwable ex) &#123; System.out.println(ex.getMessage()); &#125; @Override public void onSuccess(Integer result) &#123; System.out.println(result); &#125; &#125; public static void main(String[] args) &#123; ListenableTask listenableTask = new ListenableTask(); ListenableFuture&lt;Integer&gt; listenableFuture = listenableTask.compute(10); listenableFuture.addCallback(new CallBackImpl()); &#125;&#125; ThreadFactory 定义了创建线程的工厂方法，可以扩展该方法实现对Thread 的改造。 基于Java Config 基于注解 当采用基于Java Config 注解配置时，只需要在主配置添加@EnableAsync 注解，Spring 会自动的创建基于ThreadPoolTaskExecutor 实例注入到上下文中。 1234@Configuration@EnableAsyncpublic class AppConfig &#123;&#125; 基于AsyncConfigurer接口自定义 开发者可以自定义Executor 的类型，并且注册异常处理器。 123456789101112131415161718192021@Configurationpublic class TaskConfig implements AsyncConfigurer &#123; @Override public Executor getAsyncExecutor() &#123; ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setMaxPoolSize(100); executor.setCorePoolSize(10); return executor; &#125; @Override public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123; return new AsyncUncaughtExceptionHandler() &#123; @Override public void handleUncaughtException(Throwable ex, Method method, Object... params) &#123; System.out.println(ex.getMessage()); &#125; &#125;; &#125;&#125; 基于XML Config 基于传统XML的配置 基于XML 的形式，采用传统的Java Bean的形式配置ThreadPoolTaskExecutor。然后采用自动注入(autowire, resource,name)的可以直接在Spring Component 中注入Executor。以编程的形式实现异步任务。 123456&lt;bean id=&quot;taskExecutor&quot; class=&quot;org.springframework.scheduling.concurrent. ThreadPoolTaskExecutor&quot;&gt; &lt;property name=&quot;corePoolSize&quot; value=&quot;5&quot; /&gt; &lt;property name=&quot;maxPoolSize&quot; value=&quot;10&quot; /&gt; &lt;property name=&quot;queueCapacity&quot; value=&quot;25&quot; /&gt;&lt;/bean&gt; 基于task 命名空间的配置 Spring 为任务的执行提供了便利的task 命名空间。当采用基于XML 配置时Spring 会自动地为开发者创建Executor。同时可以在annotation-driven 标签上注册实现了AsyncUncaughtExceptionHandler 接口的异常处理器。 123&lt;!-- config exception handler --&gt;&lt;bean id=&quot;taskAsyncExceptionHandler&quot; class=&quot;org.zzy.spring4.application.schedulie.TaskAsyncExceptionHandler&quot;/&gt;&lt;task:annotation-driven exception-handler=&quot;taskAsyncExceptionHandler&quot; scheduler=&quot;scheduler&quot; executor=&quot;executor&quot;/&gt; 异步执行的异常处理除了上文提到的两种异常处理方式，Spring 还提供了基于SimpleApplicationEventMulticaster 类的异常处理方式。123456789101112@Beanpublic SimpleApplicationEventMulticaster eventMulticaster(TaskExecutor taskExecutor) &#123; SimpleApplicationEventMulticaster eventMulticaster = new SimpleApplicationEventMulticaster(); eventMulticaster.setTaskExecutor(taskExecutor); eventMulticaster.setErrorHandler(new ErrorHandler() &#123; @Override public void handleError(Throwable t) &#123; System.out.println(t.getMessage()); &#125; &#125;); return eventMulticaster;&#125; Spring 4.x 中任务调度实现Spring 的任务调度主要基于TaskScheduler 接口。ThreadPoolTaskScheduler 是Spring 任务调度的核心实现类。该类提供了大量的重载方法进行任务调度。Trigger 定义了任务被执行的触发条件。Spring 提供了基于Corn 表达式的CornTrigger实现。TaskScheduler 如下图所示。 实现TaskScheduler 接口的ThreadPoolTaskExecutor 继承关系。 基于Java Config 基于注解的配置 当采用基于Java Config 注解配置时，只需要在主配置添加@EnableScheduling 注解，Spring 会自动的创建基于ThreadPoolTaskExecutor 实例注入到上下文中。 1234@Configuration@EnableSchedulingpublic class AppConfig &#123;&#125; 基于SchedulingConfigurer接口自定义 12345678910111213@Configurationpublic class ScheduleConfig implements SchedulingConfigurer &#123; @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123; taskRegistrar.setTaskScheduler(new ThreadPoolTaskScheduler()); taskRegistrar.getScheduler().schedule(new Runnable() &#123; @Override public void run() &#123; System.out.println(&quot;hello&quot;); &#125; &#125;, new CronTrigger(&quot;0 15 9-17 * * MON-FRI&quot;)); &#125;&#125; 基于XML Config12&lt;task:annotation-driven scheduler=&quot;myScheduler&quot;/&gt;&lt;task:scheduler id=&quot;myScheduler&quot; pool-size=&quot;10&quot;/&gt; @Scheduled 注解的使用当某个Bean 由Spring 管理生命周期时，就可以方便的使用@Shcheduled 注解将该Bean 的方法准换为基于任务调度的策略。123456789@Scheduled(initialDelay=1000, fixedRate=5000)public void doSomething() &#123; // something that should execute periodically&#125;@Scheduled(cron=&quot;*/5 * * * * MON-FRI&quot;)public void doSomething() &#123; // something that should execute on weekdays only&#125; task 命名空间中的task:scheduled-tasks该元素能够实现快速地将一个普通Bean 的方法转换为Scheduled 任务的途径。具体如下：123456&lt;task:scheduled-tasks scheduler=&quot;myScheduler&quot;&gt; &lt;task:scheduled ref=&quot;beanA&quot; method=&quot;methodA&quot; fixed-delay=&quot;5000&quot; initial-delay=&quot;1000&quot;/&gt; &lt;task:scheduled ref=&quot;beanB&quot; method=&quot;methodB&quot; fixed-rate=&quot;5000&quot;/&gt; &lt;task:scheduled ref=&quot;beanC&quot; method=&quot;methodC&quot; cron=&quot;*/5 * * * * MON-FRI&quot;/&gt;&lt;/task:scheduled-tasks&gt;&lt;task:scheduler id=&quot;myScheduler&quot; pool-size=&quot;10&quot;/&gt; 总结本文着重介绍了JDK 为任务调度提供的基础类Timer。并在此基础上详细介绍了Spring 4.x 的异步执行和任务调度的底层接口设计。并针对常用的模式进行了讲解，并附带了源代码。第三方开源的Quartz 实现了更为强大的任务调度系统，Spring 也对集成Quartz 提供了转换。之后会择机再详细的介绍Quartz 的应用和设计原理。同时，Servlet 3.x 为Web 的异步调用提供了AsyncContext，对基于Web 的异步调用提供了原生的支持，后续的文章也会对此有相应的介绍。 参考引用 Spring Doc Task and Schedule Quartz Corn Wiki Servlet AsyncContext 本文章采用知识共享署名 2.5 中国大陆许可协议进行许可。欢迎转载，但转载请注明来自张兆玉，并保持转载后文章内容的完整。本人保留所有版权相关权利。本文链接：https://zhangzhaoyu.github.io/2016/09/30/spring-task-and-schedule-deep-research/","categories":[{"name":"Spring 4.x","slug":"Spring-4-x","permalink":"https://zhangzhaoyu.github.io/categories/Spring-4-x/"}],"tags":[{"name":"Schedule","slug":"Schedule","permalink":"https://zhangzhaoyu.github.io/tags/Schedule/"},{"name":"Task","slug":"Task","permalink":"https://zhangzhaoyu.github.io/tags/Task/"}],"keywords":[{"name":"Spring 4.x","slug":"Spring-4-x","permalink":"https://zhangzhaoyu.github.io/categories/Spring-4-x/"}]},{"title":"流浪者和罂粟花","slug":"tramp-and-poppy-flower","date":"2016-09-27T15:00:00.000Z","updated":"2016-09-30T12:10:04.582Z","comments":true,"path":"2016/09/27/tramp-and-poppy-flower/","link":"","permalink":"https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/","excerpt":"天边的最后一丝光亮终于在黑暗笼罩世界的最后一刻消散在远处的那座山的背后。 渐渐地，世界暗下来了。 月亮清冷的在一朵浓黑的密云里发着幽幽灰光，那光亮好似冻彻心扉的坚冰，若隐若现的冒着丝丝白气，那白气在空中翻腾，扭曲，变形，幻化出许许多多魑魅魍魉，他们面目狰狞地飞向这个世界，唱着狂欢的笙歌，去吞噬，去冻结，去撕扯这个世界。","text":"天边的最后一丝光亮终于在黑暗笼罩世界的最后一刻消散在远处的那座山的背后。 渐渐地，世界暗下来了。 月亮清冷的在一朵浓黑的密云里发着幽幽灰光，那光亮好似冻彻心扉的坚冰，若隐若现的冒着丝丝白气，那白气在空中翻腾，扭曲，变形，幻化出许许多多魑魅魍魉，他们面目狰狞地飞向这个世界，唱着狂欢的笙歌，去吞噬，去冻结，去撕扯这个世界。有一条小路在这轮孤月下面延伸，奔跑，不知道最终要去向的是哪个地方。小路旁边的有一盏灯火在暮色中亮起来。 透过那微弱的灯光，在窗户里面的一个圆桌子旁边围坐一家人，有个神情坚毅里透着憔悴的男人，有个体态瘦削却流露着母爱的女人，有个鼻子里流着鼻涕的小男孩正津津有味的吃着不知道是什么的东西。在小男孩的旁边有一只小狗欢快的摇着尾巴，看着小主人津津有味的吃着的东西，眼睛里有着自己绝对忠诚的小主人。 在这个有着一盏灯的小房子的后面，是一望无际的有着黄色土壤的田地。黑色的风绕过高山，掠过树梢，吹向了这片土地。 哗哗… 阵阵植物叶子簌簌地摩擦的声音，彼此起伏，蔓延开来。风掀起的黑色的叶子，呼啸着奔向对面的那片漆黑之中。 月亮渐渐地完全地被纯黑色的巨大黑幕所吞噬。 黑暗在世界任何一个角落里开着狂欢的派对。吸食着人们内心里最后的那么一点对于理想，自由，爱的追求。 恐慌，恐慌，满世界的恐慌。 黑暗，黑暗，满世界的黑暗。 在那个小屋子里的角落里，一个小男孩抱着一只懒洋洋的小狗甜甜地静静地在安睡。 那是一个美妙的梦，屋后面的那一望无际的植物终于开花了，在小男孩的爸爸妈妈付出了极其艰辛的劳动和汗水之后终于开花了。因为小男孩知道当这些个植物的开花的时候，肯定就是爸爸妈妈展开笑颜的时候了。 曾经很多个夜晚，小男孩对着夜空发呆，希望寻着一颗能够实现他愿望的星星。 在这个梦里，小男孩终于可以在花海奔跑，呵呵的笑声伴着小狗的汪汪叫声，在这片土地里延伸。 一群穿着黑色制服的人顺着那条小路向着这个黑暗里唯一的存在着微弱亮光的地方走来。 树影斑驳，人影可怖。 咚咚… 圆桌旁边男人，内心一惊，随后握紧了拳头。重重地压在桌子。旁边的妻子轻轻地把手放在男人的肩上。 “不要惊醒我的孩子，我们跟你们走！”。 吱吱… 门关上了。 四条人影在那条小道上前行，鞋子跟地面沙子摩擦的声音不时的响起，最后，最后，消失在远处的黑暗之中。 身后的那所小房子里，灯光依旧是那样地微弱。 只是，只是一个小男孩还有一个小狗依然静静地甜甜地睡着。 一夜的黑暗在太阳跳过对面山头的时候消失的无影无踪。 小男孩高兴地奔跑着去平时爸爸妈妈早上起来会去劳作的那片田地里，去告诉他们自己昨天做了一个美丽的梦。 时间渐渐过去了，小男孩有些心慌了，还不见爸爸妈妈。小狗在身后也嗷嗷地叫着，表示着不安。 小男孩疯狂地迈着小脚步在那片田地里穿梭。一朵朵美丽的花朵在他的眼前招摇，挡住了他寻找爸爸妈妈的视线。同时也淹没了小男孩小小身体。 黑夜渐渐地如梦魇般来到了。 在昨夜的那个小屋子里，再也没有了灯光。 哪怕是微弱的。 只是在那条路上站着一个小小男孩和一只小小狗。 在那条路上，小男孩决定去流浪，他没有眼泪，他不知掉为什么要流眼泪，为谁而流。小男孩反过身子，指着小狗，又指了一下与自己相对的另外与一个方向，狗狗很听话的把自己的头掉到了那个方向。 从此，便开始了两个生命体的流浪之旅。 两个身影消失在了夜色之中，只剩下那个小屋和午后的那片天地和田地里一望无际正开着花的植物。 匆匆的，时间流逝。那一个夜晚，那几个人物和故事，也归入到历史的洪流里，渐渐地渺小渺小，渺小到貌似不曾存在过。 一晃十几年过去了，过去了就是过去了。 后来的后来，有人看到了在那片山脚下，在那个曾经的小屋的后面的那片一望无际的田地里，每当植物开花的时候总有一个人影和一只狗游荡在那儿周围。他们的身影时隐实现在那一片罂粟花的海洋里。他们捍卫着在罂粟开花期的每一朵花，他们抵御了在罂粟花最美丽季节任何一个企图采摘哪怕一朵的破坏者。 一人一狗一片罂粟花。 本文章采用知识共享署名 2.5 中国大陆许可协议进行许可。欢迎转载，但转载请注明来自张兆玉，并保持转载后文章内容的完整。本人保留所有版权相关权利。本文链接：https://zhangzhaoyu.github.io/2016/09/27/tramp-and-poppy-flower/","categories":[{"name":"diary","slug":"diary","permalink":"https://zhangzhaoyu.github.io/categories/diary/"}],"tags":[{"name":"story","slug":"story","permalink":"https://zhangzhaoyu.github.io/tags/story/"}],"keywords":[{"name":"diary","slug":"diary","permalink":"https://zhangzhaoyu.github.io/categories/diary/"}]},{"title":"雲中的故事","slug":"story-of-the-cloud","date":"2015-05-03T04:12:12.000Z","updated":"2016-09-30T12:10:04.570Z","comments":true,"path":"2015/05/03/story-of-the-cloud/","link":"","permalink":"https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/","excerpt":"飄泊的那朵雲 心里藏着珠兒 一滴是姑娘的淚 一滴是男子的血 淚珠說：我是姑娘溫婉憂傷的情 血珠說：我是男子堅毅孤獨的心","text":"飄泊的那朵雲 心里藏着珠兒 一滴是姑娘的淚 一滴是男子的血 淚珠說：我是姑娘溫婉憂傷的情 血珠說：我是男子堅毅孤獨的心 驚雷一声 淚珠說：我怕 血珠說：你抱着我 她溶進他的心 他感覺自己的心變得好重好重 隨著風蕩 落在山中古寺的一片瓦上 朝日初升 寺中梵音唱起 那滴小雨 對着日和着梵音在瓦上 微笑着再見 本文章采用知识共享署名 2.5 中国大陆许可协议进行许可。欢迎转载，但转载请注明来自张兆玉，并保持转载后文章内容的完整。本人保留所有版权相关权利。本文链接：https://zhangzhaoyu.github.io/2015/05/03/story-of-the-cloud/","categories":[{"name":"diary","slug":"diary","permalink":"https://zhangzhaoyu.github.io/categories/diary/"}],"tags":[{"name":"story","slug":"story","permalink":"https://zhangzhaoyu.github.io/tags/story/"}],"keywords":[{"name":"diary","slug":"diary","permalink":"https://zhangzhaoyu.github.io/categories/diary/"}]}]}